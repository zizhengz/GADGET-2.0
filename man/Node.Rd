% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tree_splitting.R
\docType{class}
\name{Node}
\alias{Node}
\title{R6 class: \code{Node}}
\description{
R6 class: \code{Node}

R6 class: \code{Node}
}
\section{Methods}{

\describe{
  \item{\code{$new(id, depth, subset.idx, grid, …)}}{Constructor.}
  \item{\code{$computeSplit(X, Y, objective, …)}}{Find best split,
    update node metadata.}
  \item{\code{$computeChildren(X, Y, testdata, objective, …)}}{Create
    \code{left.child} and \code{right.child} as new \code{Node}
    instances.}
}
}

\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{Integer. Identifier within its depth level
(\code{1} = left, \code{2} = right).}

\item{\code{depth}}{Integer. Depth of the node; root starts at
\code{1}.}

\item{\code{subset.idx}}{Integer vector with row indices of
\code{testdata} that fall into this node.}

\item{\code{objective.value}}{Numeric vector of objective values for the
node (one per feature).}

\item{\code{objective.value.parent}}{Numeric vector holding the parent's
objective values.}

\item{\code{grid}}{Named list; each element is the set of grid
points (column names).}

\item{\code{id.parent}}{Integer. ID of the parent node (\code{NULL} for
root).}

\item{\code{child.type}}{Character. Either \code{"<="} or \code{">"} to
indicate left / right traversal.}

\item{\code{split.feature}}{Character. Feature chosen for splitting this
node.}

\item{\code{split.value}}{Numeric. Threshold applied to
\code{split.feature}.}

\item{\code{children}}{Two-element list with \code{left.child} and
\code{right.child} (each another \code{Node} or \code{NULL}).}

\item{\code{stop.criterion.met}}{Logical. Whether the minimal node size or
improvement threshold has been reached.}

\item{\code{improvement.met}}{Logical. Whether the improvement threshold
(\code{impr.par}) was not met.}

\item{\code{intImp}}{Numeric. Interaction importance of the node.}

\item{\code{local}}{Optional cached copy of centered ICE / ALE /
SHAP data used for fast re-computation.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Node-new}{\code{Node$new()}}
\item \href{#method-Node-computeSplit}{\code{Node$computeSplit()}}
\item \href{#method-Node-computeChildren}{\code{Node$computeChildren()}}
\item \href{#method-Node-clone}{\code{Node$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-new"></a>}}
\if{latex}{\out{\hypertarget{method-Node-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$new(
  id,
  depth = NULL,
  subset.idx,
  grid,
  id.parent = NULL,
  child.type = NULL,
  objective.value.parent = NULL,
  objective.value = NULL,
  store.data,
  improvement.met,
  intImp
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-computeSplit"></a>}}
\if{latex}{\out{\hypertarget{method-Node-computeSplit}{}}}
\subsection{Method \code{computeSplit()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$computeSplit(
  X,
  Y,
  objective,
  method,
  impr.par,
  optimizer,
  min.split,
  n.quantiles,
  grid
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-computeChildren"></a>}}
\if{latex}{\out{\hypertarget{method-Node-computeChildren}{}}}
\subsection{Method \code{computeChildren()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$computeChildren(
  X,
  Y,
  testdata,
  objective,
  method,
  model,
  predict.function,
  shap.recalc
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Node-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
